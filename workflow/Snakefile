from snakemake.utils import validate
import os

include: "rules/download_gtdb_data.smk"
include: "rules/download_refseq_data.smk"
include: "rules/gtdb.smk"
include: "rules/download_genome_data.smk"
include: "rules/refseq.smk"


def all_input(wildcards):
    """
    Generate all inputs for the rule all
    """
    wanted_input = []

    base_dir = config["base_dir"]
    if config["download"]:
        wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".proteomes"))
        if config["output"]["diamond"]:
            wanted_input.append(os.path.join(base_dir, 'diamond_db', config["prefix"] + "." + config["method"] + ".dmnd"))
        if config["output"]["blast"]:
            wanted_input.append(os.path.join(base_dir, 'ncbi_blastp_db', config["prefix"] + "." + config["method"] + ".pdb"))
    else:
        wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".sampled_accessions.txt"))
    if config["method"] == "prune_gtdb":
        wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".bac120.nwk"))
        wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".ar53.nwk"))

    return wanted_input

# Validate config-file
validate(config, schema="validation_schemes/config.schema.yaml")

rule all:
    input: all_input
