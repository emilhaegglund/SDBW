from snakemake.utils import validate
import yaml
import os

include: "rules/download_gtdb_data.smk"
include: "rules/download_refseq_data.smk"
include: "rules/gtdb.smk"
include: "rules/download_genome_data_new.smk"
include: "rules/refseq.smk"

workdir: config['workdir']

def all_input(wildcards):
    """
    Generate all inputs for the rule all
    """
    wanted_input = []
    base_dir = config["base_dir"]
    if config["method"] == "sample_ncbi":
        with open(config["sample_ncbi"]["sampling_scheme"], "r") as stream:
            sampling_scheme = yaml.safe_load(stream)
        for taxa in sampling_scheme.keys():
            wanted_input.append(os.path.join(base_dir, "ncbi_data", taxa.replace(" ", "_") + ".tsv"))

    if config["download_proteomes"]:
        wanted_input.append("proteomes")
    #if config["download_genomes"]:
#        wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".genome_data"))
    #if config["download_proteomes"] and not config["download_genomes"]:
        #wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".genomes_wo_annotation"))
    if config["output"]["diamond"]:
        wanted_input.append(os.path.join('diamond_db', "sdbw.dmnd"))
    if config["output"]["blast_protein"]:
        wanted_input.append(os.path.join('ncbi_blastp_db', "sdbw.pdb"))
    #else:
    #    wanted_input.append(os.path.join(base_dir, config["prefix"] + "." + config["method"] + ".sampled_accessions.txt"))
    if config["method"] == "prune_gtdb":
        wanted_input.append(os.path.join("prune_gtdb.bac120.nwk"))
        wanted_input.append(os.path.join("prune_gtdb.ar53.nwk"))
    print(wanted_input)
    return wanted_input

# Validate config-file
validate(config, schema="validation_schemes/config.schema.yaml")
rule all:
    input: all_input
